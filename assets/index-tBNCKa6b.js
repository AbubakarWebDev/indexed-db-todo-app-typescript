var S=Object.defineProperty;var T=(s,e,t)=>e in s?S(s,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):s[e]=t;var l=(s,e,t)=>T(s,typeof e!="symbol"?e+"":e,t);(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const r of document.querySelectorAll('link[rel="modulepreload"]'))o(r);new MutationObserver(r=>{for(const a of r)if(a.type==="childList")for(const n of a.addedNodes)n.tagName==="LINK"&&n.rel==="modulepreload"&&o(n)}).observe(document,{childList:!0,subtree:!0});function t(r){const a={};return r.integrity&&(a.integrity=r.integrity),r.referrerPolicy&&(a.referrerPolicy=r.referrerPolicy),r.crossOrigin==="use-credentials"?a.credentials="include":r.crossOrigin==="anonymous"?a.credentials="omit":a.credentials="same-origin",a}function o(r){if(r.ep)return;r.ep=!0;const a=t(r);fetch(r.href,a)}})();const q="useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict";let A=(s=21)=>{let e="",t=crypto.getRandomValues(new Uint8Array(s));for(;s--;)e+=q[t[s]&63];return e};class L{constructor(e,t,o,r){l(this,"database");l(this,"request");l(this,"isVersionChanged",!1);l(this,"onRequestError",e=>{var t;console.error(`IndexedDB error: ${(t=this.request)==null?void 0:t.error}`,e)});l(this,"onRequestSuccess",e=>{this.database=this.request.result,this.isVersionChanged||e==null||e(),this.isVersionChanged=!1});l(this,"onUpgradeneeded",(e,t)=>{this.database=this.request.result,this.createObjectStore(e).then(()=>{t==null||t(),this.isVersionChanged=!0}).catch(o=>alert(o))});this.request=indexedDB.open(e,t),this.setupEventListeners(o,r)}setupEventListeners(e,t){this.request.addEventListener("error",this.onRequestError),this.request.addEventListener("success",()=>this.onRequestSuccess(t)),this.request.addEventListener("upgradeneeded",()=>this.onUpgradeneeded(e,t))}createObjectStore({objectStoreName:e,objectStoreOptions:t,objectStoreIndexes:o}){return new Promise((r,a)=>{var n,c;try{if((n=this.database)!=null&&n.objectStoreNames.contains(e)){a(new Error("The passed objectStoreName already exists in the database"));return}const d=(c=this.database)==null?void 0:c.createObjectStore(e,t);if(!d){a(new Error("Failed to create object store"));return}o==null||o.forEach(({name:u,keyPath:y,options:R})=>{d.createIndex(u,y,R)}),d.transaction.oncomplete=()=>r("success")}catch(d){a(d instanceof DOMException?d.message:"An error occurred while creating the object store")}})}createRecord(e,t,o){return this.performTransaction(e,"readwrite",r=>{r.add(t,o)},"write")}updateRecord(e,t,o){return this.performTransaction(e,"readwrite",r=>{r.put(t,o)},"update")}getRecords(e,t){return new Promise((o,r)=>{var d;const a=(d=this.database)==null?void 0:d.transaction(e);if(!a){r(new Error("Failed to create transaction"));return}const n=a.objectStore(e),c=t?n.get(t):n.getAll();c.onerror=()=>{var u;return r(new Error(((u=c.error)==null?void 0:u.message)||"Failed to read records"))},c.onsuccess=()=>o(Array.isArray(c.result)?c.result:[c.result])})}deleteRecord(e,t){return this.performTransaction(e,"readwrite",o=>{o.delete(t)},"delete")}performTransaction(e,t,o,r){return new Promise((a,n)=>{var u;const c=(u=this.database)==null?void 0:u.transaction(e,t);if(!c){n(new Error(`Failed to create transaction for ${r} operation`));return}const d=c.objectStore(e);o(d),c.onerror=()=>{var y;return n(new Error(((y=c.error)==null?void 0:y.message)||`Failed to perform ${r} operation`))},c.oncomplete=()=>a("success")})}}const x="main",D=1,m="todos",p=document.querySelector("#todo-id"),h=document.querySelector("#todo-name"),f=document.querySelector("#todo-image"),i=document.querySelector("#submit-btn"),E=document.getElementById("table-body"),O=()=>{var t;const s=h==null?void 0:h.value,e=(t=f==null?void 0:f.files)==null?void 0:t[0];if(!s||!e){alert("Please enter valid data");return}return{todoName:s,todoImage:e,todoId:(p==null?void 0:p.value)??""}},P=(s,e,t)=>{if(p&&h&&f){h.value=e,p.value=s;const o=new DataTransfer;o.items.add(t),f.files=o.files}},F=()=>{p&&h&&f&&(p.value="",h.value="",f.value="")},b=async s=>{try{await s()}catch(e){alert("Something went wrong. Please check browser console for the error"),console.error(e)}},v=(s,e,t)=>{document.addEventListener(s,o=>{const r=o.target.closest(e);r&&t(o,r)})},U={objectStoreName:m,objectStoreIndexes:[{name:"nameIndex",keyPath:"name",options:{unique:!1}}],objectStoreOptions:{keyPath:"id"}},w=new L(x,D,U,g),$=async s=>{await w.createRecord(m,s)},j=async s=>{await w.updateRecord(m,s)},B=async s=>{await w.deleteRecord(m,s)},C=async s=>(await w.getRecords(m,s))[0],M=async()=>await w.getRecords(m);async function g(){await b(async()=>{const e=(await M()).map((t,o)=>{const r=URL.createObjectURL(t.image);return`
        <tr class="border-b dark:border-neutral-500">
          <td class="whitespace-nowrap px-6 py-4 font-medium">${o+1}</td>
          <td class="whitespace-nowrap px-6 py-4">${t.name}</td>
          <td class="whitespace-nowrap px-6 py-4">
            <img src="${r}" alt="Todo Attachment" width="100" height="100" />
          </td>
          <td class="whitespace-nowrap px-6 py-4">
            <button
              type="button"
              id="update-btn"
              data-id="${t.id}"
              class="bg-blue-600 text-neutral-50 px-4 py-2 rounded-lg"
            >
              Update
            </button>
          </td>
          <td class="whitespace-nowrap px-6 py-4">
            <button
              type="button"
              id="delete-btn"
              data-id="${t.id}"
              class="bg-red-600 text-neutral-50 px-4 py-2 rounded-lg"
            >
              Delete
            </button>
          </td>
        </tr>
      `}).join("");E&&(E.innerHTML=e)})}const _=async s=>{s.preventDefault();const e=O();if(!e)return;const{todoId:t,todoName:o,todoImage:r}=e,a=i==null?void 0:i.dataset.action,n={id:a==="update"?t:A(),name:o,image:r};await b(async()=>{a==="update"?await j(n):await $(n),alert(`Record successfully ${a==="update"?"Updated":"Added"}`),F(),await g()})},N=async(s,e)=>{const t=e.dataset.id;t&&await b(async()=>{const o=await C(t);P(o.id,o.name,o.image),i&&(i.dataset.action="update")})},V=async(s,e)=>{const t=e.dataset.id;if(!t){alert("Todo ID is not found");return}await b(async()=>{await B(t),await g()})};i==null||i.addEventListener("click",_);v("click","#update-btn",N);v("click","#delete-btn",V);window.indexedDB||alert("Indexed DB is not supported");
